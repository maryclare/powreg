// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rtnormrej
NumericVector rtnormrej(NumericVector mu, NumericVector sd, NumericVector l, NumericVector r);
RcppExport SEXP _powreg_rtnormrej(SEXP muSEXP, SEXP sdSEXP, SEXP lSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnormrej(mu, sd, l, r));
    return rcpp_result_gen;
END_RCPP
}
// remcol
arma::mat remcol(arma::mat A, int i);
RcppExport SEXP _powreg_remcol(SEXP ASEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(remcol(A, i));
    return rcpp_result_gen;
END_RCPP
}
// remrow
arma::colvec remrow(arma::colvec a, int i);
RcppExport SEXP _powreg_remrow(SEXP aSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(remrow(a, i));
    return rcpp_result_gen;
END_RCPP
}
// sampleBeta
arma::colvec sampleBeta(NumericVector start, NumericVector DUty, NumericVector delta, NumericVector d, NumericMatrix Vt, double sigsq, NumericMatrix W);
RcppExport SEXP _powreg_sampleBeta(SEXP startSEXP, SEXP DUtySEXP, SEXP deltaSEXP, SEXP dSEXP, SEXP VtSEXP, SEXP sigsqSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type DUty(DUtySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Vt(VtSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleBeta(start, DUty, delta, d, Vt, sigsq, W));
    return rcpp_result_gen;
END_RCPP
}
// sampleGamma
void sampleGamma(NumericVector& b, const double& tausq, const double& q, NumericVector& g);
RcppExport SEXP _powreg_sampleGamma(SEXP bSEXP, SEXP tausqSEXP, SEXP qSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< const double& >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type g(gSEXP);
    sampleGamma(b, tausq, q, g);
    return R_NilValue;
END_RCPP
}
// sampler
List sampler(const NumericVector& DUty, const NumericMatrix& Vt, const NumericVector& d, const NumericMatrix& W, double sigsq, double tausq, double q, const int& samples, NumericVector start, int seed);
RcppExport SEXP _powreg_sampler(SEXP DUtySEXP, SEXP VtSEXP, SEXP dSEXP, SEXP WSEXP, SEXP sigsqSEXP, SEXP tausqSEXP, SEXP qSEXP, SEXP samplesSEXP, SEXP startSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type DUty(DUtySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Vt(VtSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sampler(DUty, Vt, d, W, sigsq, tausq, q, samples, start, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_powreg_rtnormrej", (DL_FUNC) &_powreg_rtnormrej, 4},
    {"_powreg_remcol", (DL_FUNC) &_powreg_remcol, 2},
    {"_powreg_remrow", (DL_FUNC) &_powreg_remrow, 2},
    {"_powreg_sampleBeta", (DL_FUNC) &_powreg_sampleBeta, 7},
    {"_powreg_sampleGamma", (DL_FUNC) &_powreg_sampleGamma, 4},
    {"_powreg_sampler", (DL_FUNC) &_powreg_sampler, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_powreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
